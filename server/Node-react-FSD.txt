THIS ARE MY NOTES DURING DOING THE COURSE (yes, there are some obvious things here too, I come here back to remind myself how to do stuff)

- using passport for google's oath flow
    - installing "passport" (2 modules)
        - passport - general helpers for handling auth in Express apps
        - passport strategy - Helpers for authenticating with one very specific method (email/pssword, google, facebook etc) - the number of ways I want to authenticate 
                              defines how many strategy modules I need to install

        - modules used in the course
            - passport-google-oauth20
            - passport

    - how does the oauth work?
        user clicks login and I am redirecting them to certain route, specified by me.
        I have a route specified for that in my express app, that has passport authenticate method 'attached' after invoking it
        so passport makes a request with clientID, clientSecret, scope and callbackURL.
        After user grants permission to my app google redirects to callbackURL?code=2132/adsadsadakjn1221321 that code is information
        that I can use in the second passport.authenticate call and after second authentication I get: 
        
        - accessToken that allows to get user's data and do some actions on behalf of this user (expires after some time period)
        - refreshToken - allows to update accessToken

        after all those steps there is only work on my side: creating record in db, login/logout etc.
    - steps for using google oath
        - getting clientID and clientSecret tokens
            - registering the app in google.developers.console
            - enable api
            - library -> google+ in search
            - create credentials
                - left side-bar -> credentials
                - oAuth client ID option
            - consent screen - screen that is shown during "permission trigger"
                - only app name is not optional (I guess) 

            - what are these tokens?
                - clientID - public token (not data), it is id of my app in google's servers
                - clientSecret - confidential data, data only known by application and authorization server
            
        - storing these two tokens (basic version)
            - server/config/keys.js
                module.exports = { 
                    googleClientID: '12323',
                    googleClientSecret: '123'
                };
            
            - .gitignore file update to skip this config file, so no confidential data will be commited 

        - oauth error (400 uri_mismatch...)
            - after passing http://localhost:5000/ as callback uri, there comes an error, the reason is quite simple
              In code I have /auth/google/callback specified, I can not use / for this uri (in google), since everybody knows my clientID 
              and just changing uri to 'hacker.com/' will affect getting from google code that could be used to retrieve data that is why
              certain route is specified for that, with localhost, in the future that will be changed too

        - oauth with passport (google strategy)
            passport.use(
              new GoogleStrategy({
                clientID: keys.googleClientID,
                clientSecret: keys.googleClientSecret,
                callbackURL: '/auth/google/callback' // url that will be used after user grants permission, there will be code attached, it is route to handle on my side
              }, (accessToken, refreshToken, profile, done) => {
                console.log('Access Token:', accessToken);
                console.log('Refresh Token:', refreshToken);
                console.log('profile:', profile);
              })
            );

            app.get('/auth/google', passport.authenticate('google', { // google as name of strategy (it is configured in passport already)
              scope: ['profile', 'email'] // scopes (things I want have access to)
            }));

            app.get('/auth/google/callback', passport.authenticate('google')); // passport allows to authenticate based on code in url

- server structure refactor (I am not sure if this is better than using routes)
    - auth routes
        module.exports = (app) => {
            app.get('/auth/google', passport.authenticate('google', { // google as name of strategy (it is configured in passport already)
                scope: ['profile', 'email'] // scopes (things I want have access to)
            }));

            app.get('/auth/google/callback', passport.authenticate('google')); // passport allows to authenticate based on code in url
        }
    
    - usage in index.js
        require('./routes/authRoutes')(app);

- theory of authentication
    - http is stateless - two different requests can not share data (auth request won't tell nex request that user is authenticated)
    - how does it work:
        - after login process server returns a token, through which user will identify in other requests
        - in cookie based authentication there is just cookie (header has value of Set-Cookie: 'random_token'), this cookie will be saved in browser
          and all next requests will be made with that cookie in header 
    
    - user/password vs oauth
        - in user/password data given by user is compared with data already stored in database, or in case someone is registering, just storing the data...
        - in oauth user goes through the 3rd party authentication process every time, but I assume, that they have been here already and signed up
          during which I stored some not changed by google data as id and compare it every time user tries to login, so I can identify them or store id data
          when they appear first time

- setting up remotely hosted mongodb - mLab (easy to configure, gives URI to connect)

- user authetincation in practice (in code)
    - user clicks sing up
        - goes through oauth and code comes to:
                - check if user already exists by googleID 
                    - if exists done(null, existingUser) - no error, passing user found in db
                    - if does not exist 
                        new User({ googleId: profile.id }).save().then(user => { - create new user and invoke done with created one in then since async
                          done(null, user);
                        });

            passport.use(
              new GoogleStrategy(
                {
                  clientID: keys.googleClientID,
                  clientSecret: keys.googleClientSecret,
                  callbackURL: "/auth/google/callback" // url that will be used after user grants permission, there will be code attached, it is route to handle on my side
                },
                (accessToken, refreshToken, profile, done) => {
                  User.findOne({ googleId: profile.id })
                    .then(existingUser => {
                      if (existingUser) {
                        done(null, existingUser); // arg1: error object, arg2: data from db
                      } else {
                        new User({ googleId: profile.id }).save().then(user => {
                          done(null, user);
                        });
                      }
                    })
                    .catch(err => {
                      console.log(err);
                    });
                }
              )
            );
    - after singnig up :
        - this function takes his data and encodes, so cookie can store his unique data
            passport.serializeUser((user, done) => {
              // arg1: instance of user passed in done(null, user) in then of findOne or save below
              done(null, user.id); // Using mongodb id (can access to id instead of _id.id), that will be in cookie
            });

    - to make this possible there need to be two middlewares applied, to use cookies in express and passport

        app.use(
          cookieSession({
            maxAge: 30 * 24 * 60 * 60 * 1000, // how long cookie will be held in browser until it will expire
            keys: [keys.cookieKey] // just random char sequence, it is array, so it will pick one if more declared
          })
        );

        // Telling passport to use cookies to handle authentication
        app.use(passport.initialize());
        app.use(passport.session());

    - if user makes a request, this method is invoked, to get user instance from cookie data
        passport.deserializeUser((id, done) => {
          User.findById(id).then((user) => {
        		done(null, user)
        	});
        });

    !IMPORTANT!: after deserializing user there comes user instance in req.user, so ready to use object
    Basically passport is a tool that I need to tell, what data I want to use (encoded data), so 
    everything will work under the hood

    - logout user (passport does all the work attaching a special function that resets the cookie)

- Setting up production and dev environment (there is different google api and mongodb setup for prod and dev)
    - steps to do:
        - creating dev file with hardcoded data (for local development) - this file is not committed
        - creating prod file that has usage of local environment variables
        - changing keys.js, where now it is decided what to require, based on NODE_ENV env variable
    
    - environemt variables setup on heroku
        - reveal config vars
        - using keys with name of key names form prod.js and values hardcoded like in dev.js (it is secure there)

- Problem with https vs http (400 uri_mismatch)
    - in google https given
    - what causes this - proxy used by heroku, google strategy can see that it is used so the callback comes without http, but I can trust heroku's proxy, at least I need to :D 
    - solutions:
        - adding some option to google strategy, that will ignore that heroku uses proxy
            - proxy: true
        - passing whole callback url with https

- using react with express
    - running client and server simultaneous (using concurrently)
        - changes in package.json in server (three last scripts are responsible for that)
            "scripts": {
              "start": "node index.js",
              "server": "nodemon index.js",
              "client": "npm run start --prefix client",
              "dev": "concurrently \"npm run server\" \"npm run client\""
            },
        - from this time npm run dev runs client and server in one console
    
    - conencting express server with react server (links)
        - problem to face
            - <a href="/google/auth" /> leading to localhost:3000 instead of localhost:5000 that express server is running on
        - steps to do
            - installing http-proxy-middleware
            - creating file that sets up this middleware and exports it (can be found in client/src/setupProxy)
            
    - difference between react and express on dev and on production
        - on dev env
            - there are two servers on :3000 and :5000, that is why I need to use proxy, because all link would lead to localhost:3000 which is not my
              express server on
        - on prod
            - babel and webpack after doing manually : react-scripts build get rid of server and creates structure:
                - build/static
                - static/css
                - static/js
                - static/media
              all data is now ready to be "inserted" in express server structure so there will no longer be two servers
        
        - problems if I didn't go with this proxy approach
            - cookies are held on localhost:3000, localhost:5000 wouldn't get requests with cookies included
            - CORS request from :3000 to :5000 (treated like different domains)

    - async-await
        fetchAlbums = () => {
            fetch('https://rallycoding.herokuapp.com/api/music_albums')
                .then((res) => res.json()) // returning json, for chained then 
                .then((json) => console.log(json));
        };
        
        
        fetchAlbumsAA = async () => {
            const res = await fetch('https://rallycoding.herokuapp.com/api/music_albums');
            const json = await res.json(); // returns Promise also 
            console.log(json);
        };
        
        fetchAlbumsAA();

- client (first setups and component structure creation)
    - main components used for setups
        - index.js (upper layer) - responsible for redux setup
        - App.js (lower layer) - responsible for React router setup
    - used dependencies
        - redux
        - react-redux
        - react-router-dom
    
    - redux high level structure
        - two combined reducers 
            - authReducer 
            - surveysReducer
    - Routes setup
        - all done within App.js, including BrowserRouter
        - routes with switch (order is important in this approach, could use exact)
        
    - setting up css library (materializecss with npm)
        - npm i --save materialize-css
        - import 'materialize-css/dist/css/materialize.min.css'; - require that is enabled by webpack (there is need to point the css file)
        - materialize requires root div with 'cointainer' class

    - creating communication between client and express server
        - in theory:
            app component calls action creator, that makes a get request, to get information if user is logged in
            basing on that information action type is selected and dispatched, authReducer gets this action and updates flag 
            if user is logged in or not, that will affect header (its appearance)
        
        - modules used in this point
            - axios - for requests
            - redux-thunk - for making a async action creators that will handle asynchronous requests to api server

        - set up steps (redux thunk)
            - what does it do for me? 
                - it detects in action creator if when I return a function and if I do, it passes dispatch function to it
            - steps
                import reduxThunk from 'redux-thunk';
                const store = createStore(reducers, {}, applyMiddleware(reduxThunk)); // adding to middleware

        - action creators and authReducer's behaviour in cooperation with App.js component
            - action creators
                - structure 
                    - multiple action creator files (one index.js file and two other that will be imported)
                    - types.js which holds all types of actions that are dispatched in the app

                - using thunk (asynchronous action creator, I have access to dispatch method, so I decide when it is called)
                    export const fetchUser = () => async dispatch => { // Getting dispatch, since I am returning a function from action creator
                      const res = await axios.get("api/current_user");
                      dispatch({
                        type: actionTypes.FETCH_USER,
                        payload: res.data
                      });
                    };
            - App.js
                - connecting using connect from 'react-redux'
                    import * as actions from "../actions"; // this import is interesting, since I am just pointing at folder and index.js action creators are imported (possibilities to import to index.js more files ...)
                    export default connect(
                      null,
                      actions //passing actions straight without mapDispatchToProps
                    )(App);
                
                - fetching user (checking if user is logged in)
                     componentDidMount() {
                      this.props.fetchUser();
                    }

                - authReducer
                    export default (state = null, action) => {
                      switch (action.type) {
                        case actionTypes.FETCH_USER: {
                          return action.payload || false; // empty string is treated like false, but would return empty string, so if false ('') return false
                        }
                        default: {
                          return state;
                        }
                      }
                    };
    
                    standard reducer with setting data for whole reducer, not for object of state of this reducer
                    so I access the data with state.auth in mapStateToProps, not state.auth.user, maybe that will be refactored

                there is also one thing that lecturer does in other approach:
                    renderContent = () => {
                      switch (this.props.userState){
                        case null: {
                          return null;
                        }
                        case false: {
                          return <li><a href="/auth/google">Login With Google</a></li>
                        }
                        default: {
                          return <li><a>Logout</a></li>
                        }
                      }
                    }

                    this method is just invoked in jsx, to this point there was a if statement in render method that had
                    the same purpose and data was passed to a variable, both approaches have adv/disadv I guess

        - redirecting after logging out (two ways)
            - a link to /api/logout - will cause refresh of browser page (easy to handle)
            - ajax call - no refresh, but I will need to handle action creators, reducer and redirections on my own (faster, since no reload)

            The real thing here is that I don't need to change anything in redux store, just another componentDidMount 
            call and I know if someone is logged in or not and passport.logout() is handling cookies, so deserialize user
            won't get any data after logout

    - redirecting user (comparison)
        - a - navigating to different HTML document
        - Link - navigating to different route rendered by React router

        - example of handling redirection to different routes basing on the information if user is logged in
            <Link to={this.props.userAuthState ? '/surveys': '/'} className="left brand-logo">
              Emaily
            </Link>
- Billing
    - high level rules
        - never accept raw credit card numbers
        - never store credit card numbers
        - always use an outside payment processor (stripe is recommended (take care of security), recurly for monthly subs)
        - fraud and chargebacks are a pain :D (monthly payments are hard)
    
    - using stripe in theory
        - user clicks
        - stripe generates form that I show
        - data sent to stripe 
        - stripe sends back tocken that represents charge
        - I send token to my API 
        - my API confirms that charge was successful
        - adding credits to user's account

    - setting up stripe
        - creating stripe account
        - getting clientID and clientSecret
        - installing plugin to client side (react)
            - react-stripe-checkout (react plugin that already uses checkout.js)
        - adding pk and sk to config data (in server)
        - problem there is no way to use ES2015 modules with some logic (only for common modules)
          so there is no way to create keys.js with default exports

            REMINDER: client side only cares about publishable key

            - solution: (that is delivered by create-react-app)
                - using custom evironment variables in react
                    - it can be done in shell
                    - it can be done in .env files in the root of project
                        - .env as default
                        - .env.local - local environment
                        - .env.development, .env.test, .env.production
                        - .env.development.local, .env.test.local, .env.production.local
        
        - creating essential files in /client
            - .env.development, .env.production
                - content (REACT_APP beginning is required)
                    REACT_APP_STRIPE_KEY=pk_test_GZye7p2idQoqpMvtNqVAHAls
            - accessing this data:
                console.log('STRIPE KEY IS:', process.env.REACT_APP_STRIPE_KEY);
                console.log('ENVIRONMENT IS:', process.env.NODE_ENV);

            REMINDER: IF I WANTED TO USE ACTIVATED STRIPE (REAL TRANSACTIONS) THERE WOULD BE SECOND PUBLIC KEY
                      THAT SHOULD BE USED IN PRODUCTION.JS
    
    - using stripe
        - creating a class component (probably not required) that surrounds StripeCheckout component
        - stripe checkout example usage
            // amount in cents
            // token mean callback from stripe API
            // stripeKey taken from .env.development or .env.production, but react knows where we are now (this is pk)
            <StripeCheckout 
              name="Emaily"
              description="5$ for 5 email credits"
              amount={500}
              token={token => this.props.handleToken(token)} // here is the moment to react on successful or unsuccessful payment, calling action creator
              stripeKey={process.env.REACT_APP_STRIPE_KEY}
            >
              <button className="btn">Add Credits</button>
            </StripeCheckout>
            
            child element for StripeCheckout is a button that triggers payment form (customization purpose)

        - how does it work to this point
            user clicks Add credits, a form is displayed, with data passed to StripeCheckout component, component that
            is outer component to StripeCheckout is connected to redux, so it can call action creators, in callback action creator for
            updating user data is called, in this action creator there is a post request done, that passes token that the callback receives
            there. I need to use "stripe" module for express to get information from token, update db data and return updated user data
            so reducer can update redux store and header will be updated accordingly. To get information about how to handle this token
            I need to go to stripe.com/docs/api/node#create_charge and in core resources there is a charges category, it is explained there
            how to create a charge object

        - parsing post/patch/put data, so I have access to it in req.body
            const bodyParser = require('body-parser');
            app.use(bodyParser.json());

        - creating a charge object (with naive check if user is logged in)
            app.post("/api/stripe", async (req, res) => {
              if (!req.user) { // easy check if user is logged in 
                return res.status(401).send({error: 'You must log in'});
              }
              const charge = await stripe.charges.create({
                amount: 500,
                currency: "usd",
                description: "5$ for 5 credits",
                source: req.body.id
              });
              req.user.credits += 5; // Access to user delivered by passport, but only if there is cookie (user logged in), that should be checked first
              const user = await req.user.save(); // saving with mongoose
              res.send(user);
            });
    
    - middleware for authentication if user is logged in 
        module.exports = (req, res, next) => { // next for "next middleware" in the chain
          if (!req.user) {
            return res.status(401).send({ error: 'You muist log in'});
          }

          next();
        }

        this can be imported and used in second argument of a route, there can be more middlewares 
        app.post("/api/stripe", requireLogin, async (req, res) => {

- deployment to heroku with routing and payment included
    - problem: how to make express pick up routes that are defined in App.js (in react server, like /surveys (not def. in express)) on production build
        - solution (high level):
            - express needs to recognize that it has no specified routes like this and forward request to react-router
            - express needs to know that particular file.js needs to be "used", so right page will appear
    
    - deployment options to heroku (in terms of client and how it behaves on prod (no client's server available))
        - running npm run build on client -> commiting built project -> pushing to heroku (you don't want to push built client like that)
        - pushing to heroku -> telling heroku about all client dependencies -> heroku builds client project (quite hard version, since a LOT dependencies are used (inc. Babel and Webpack))
        - pushing CI -> running tests -> CI buold and commits client -> CI pushes build to heroku

    - going with option no. 2 (heroku node.js support for more info -> customizing build process)
        - pushing to heroku
        - heroku install server dependencies
        - heroku runs 'heroku-postbuild'
        - telling heroku to install client dependencies inside above script
        - telling heroku to run 'npm run build'
    
    - steps to do to deploy (in practice)
        - package.json inside server (adding new script) - installing and building all client dependencies
            "heroku-postbuild": "NPM_CONFIG_PRODUCTION=false npm install --prefix client && npm run build --prefix client"

- email (survey)
    - subdocument collections
        - it has some limitations (4MB)

    - creating a subdocument collection
        const RecipientSchema = require('./Recipient');

        const surveySchema = new Schema({
        	title: String,
        	body: String,
        	subject: String,
        	recipients: [RecipientSchema], // subdocument
        	yes: {
        		type: Number,
        		default: 0
        	},
        	no: {
        		type: Number,
        		default: 0
        	}
        });
    
    - creating relationships in mongodb
        _user: {type: Schema.Types.ObjectId, ref: 'User'} // _ is optional

    - creating object of model that has a reference and subdocument collection
        const survey = new Survey({
	    		title,
	    		subject,
	    		body,
	    		recipients: recipients.split(',') .map(email => ({ email: email.trim() })),
	    		user: requ.user.id,
	    		dateSent: Date.now()
	    	})
	    });

    - mail sending process
        - survey instance and email template are brought together and a single mail object is created
        - http request sends this object to email provider

    - good vs bad practice in creating a mailer objects
        - BAD - for every recipient there is a male object created#
        - GOOD - there is one mailer object for all recipeints that is passed to Email provider
            - downside of this approach - every single user gets identical email
            - solution to this problem - using sendgrid, that replaces all links with custom links that lead to sendgrid (they are building a matrix, to map data 
                                         and I can get the data using their api), this process is a webhook
    
    
    - sendgrid
        - setup
            - creating api key on the site
            - adding it to prod and dev
            - installing sendgrid dependency in server
        - mailer setup
        